name: Publish to PyPI

on:
  push:
    branches: [main]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC authentication with PyPI
      contents: write  # Required for creating releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history to get the latest commit (including version bump)
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(python -c "
        import re
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        match = re.search(r'version = \"([^\"]+)\"', content)
        print(match.group(1) if match else 'unknown')
        ")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Building version: $VERSION"
    
    - name: Check if version already exists on PyPI
      id: check_version
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/pypi/solveig/$VERSION/json")
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️  Version $VERSION already exists on PyPI, skipping publish"
        else
          echo "exists=false" >> $GITHUB_OUTPUT  
          echo "✅ Version $VERSION is new, proceeding with publish"
        fi
    
    - name: Build package
      if: steps.check_version.outputs.exists == 'false'
      run: |
        echo "🔨 Building package..."
        python -m build
        echo "📋 Package contents:"
        ls -la dist/
    
    - name: Verify package
      if: steps.check_version.outputs.exists == 'false'
      run: |
        echo "🔍 Verifying package integrity..."
        twine check dist/*
    
    - name: Publish to PyPI
      if: steps.check_version.outputs.exists == 'false'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print: hash  # Print file hashes for verification
    
    - name: Create GitHub Release
      if: steps.check_version.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ## Changes in v${{ steps.get_version.outputs.version }}
          
          Auto-generated release from main branch.
          
          Install with: `pip install solveig==${{ steps.get_version.outputs.version }}`
        draft: false
        prerelease: false